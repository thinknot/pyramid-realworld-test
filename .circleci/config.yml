# Note that the following stanza uses CircleCI 2.1 to make use of a Reusable Executor
# This allows defining a docker image to reuse across jobs.
# visit https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-executors to learn more.
# NixOS stuff taken from
# https://github.com/PrivateStorageio/PaymentServer/blob/master/.circleci/config.yml

version: 2.1

orbs:
  check_untracked_changes: niteo/check-untracked-changes@1

workflows:
  version: 2

  workflow:
    jobs:
      - Backend Deps
      - Backend Lint:
          requires:
            - Backend Deps
      - Backend Test:
          requires:
            - Backend Deps
      - Postman Tests:
          requires:
            - Backend Deps

executors:
  conduit:
    working_directory: /app
    docker:
      - image: nixorg/nix:circleci
      - image: circleci/postgres:11.2-alpine
      - image: redis

    environment:
      PGHOST: localhost
      POSTGRES_USER: postgres
      POSTGRES_DB: postgres
      POSTGRES_PASSWORD: ""
      NIX_BUILD_SHELL: "bash"
      ENTRYPOINT: "/app/docker-entrypoints/test.sh"

jobs:

  #################################
  #       ---- Backend ----       #
  # Jobs for the Pyramid backend. #
  #################################

  Backend Deps:
    executor: conduit
    working_directory: /app
    steps:

      - checkout

      - restore_cache:
          keys:
            - nix-deps-v1-{{ checksum "shell.nix" }}
            - nix-deps-v1-

      - restore_cache:
          name: "Restoring Cache - Python"
          keys:
            - backend-deps-v3-{{ checksum "poetry.lock" }}
            - backend-deps-v3-

      - run:
          name: Build nix shell
          command: |
            $ENTRYPOINT python --version

      - save_cache:
          key: nix-deps-v1-{{ checksum "shell.nix" }}
          paths:
            - /nix

      - persist_to_workspace:
          root: /app
          paths:
            - "*"

      - run:
          name: Touch .installed
          command: touch .installed

      - run:
          name: Install dependencies
          command: |
            $ENTRYPOINT poetry install

      - save_cache:
          key: backend-deps-v3-{{ checksum "poetry.lock" }}
          paths:
            - .venv
            - src/conduit.egg-info

  Backend Lint:
    executor: conduit
    working_directory: /app
    steps:

      - attach_workspace:
          at: /app

      - restore_cache:
          name: "Restoring Cache - Nix"
          keys:
            - nix-deps-v1-{{ checksum "shell.nix" }}

      - restore_cache:
          name: "Restoring Cache - Python"
          keys:
            - backend-deps-v3-{{ checksum "poetry.lock" }}

      - run:
          name: Touch .installed
          command: touch .installed

      - run:
          name: Run Linters
          command: |
            $ENTRYPOINT pre-commit install -f --hook-type pre-commit
            $ENTRYPOINT pre-commit install -f --hook-type pre-push
            $ENTRYPOINT make lint all=true

      - run:
          name: run mypy
          command: |
            $ENTRYPOINT make types


  Backend Test:
    executor: conduit
    working_directory: /app
    steps:

      - attach_workspace:
          at: /app

      - restore_cache:
          name: "Restoring Cache - Nix"
          # TODO: fail build if caches are empty at this point
          keys:
            - nix-deps-v1-{{ checksum "shell.nix" }}

      - restore_cache:
          name: "Restoring Cache - Python"
          keys:
            - backend-deps-v3-{{ checksum "poetry.lock" }}

      - run:
          name: Touch .installed
          command: touch .installed

      - run:
          name: Wait for Postgres to be ready
          command: |
            for i in `seq 1 10`;
            do
              $ENTRYPOINT nc -z localhost 5432 && echo Success && exit
              echo -n .
              sleep 1
            done
            echo Failed waiting for Postgres && exit 1

      - run:
          name: Create testing db
          # TODO: add --pure? but then PGHOST is missing
          command: |
            $ENTRYPOINT .docker/devdb.sh
            $ENTRYPOINT .docker/testdb.sh

      - run:
          name: Test development.ini
          command: |
            $ENTRYPOINT .docker/devdb.sh
            CHECK_DB_MIGRATED=0 $ENTRYPOINT pshell etc/development.ini < .circleci/exit.sh

      - run:
          name: Checking consistency between alembic revision and conduit models
          command: |
            $ENTRYPOINT make devdb
            # As of now, the word count in an empty migration script is: 84
            EXPECTED_WORD_COUNT=84
            PRESENT_WORD_COUNT="$(cat $($ENTRYPOINT alembic -c etc/alembic.ini -x ini=etc/development.ini revision --autogenerate -m 'Test Consistency' | cut -d ' ' -f2) | wc -w)"
            if [ $EXPECTED_WORD_COUNT != $PRESENT_WORD_COUNT ]; then
              echo "You probably forgot to generate and commit DB migration...!"
              false
            fi

      - run:
          name: Test production.ini
          command: |
            CHECK_DB_MIGRATED=0 /app/docker-entrypoints/run.sh env JWT_SECRET=secret DATABASE_URL=postgresql://conduit_dev@localhost/conduit_dev pshell etc/production.ini < .circleci/exit.sh

      - run:
          name: Run unit tests
          command: |
            $ENTRYPOINT make unit


  ######################################
  #      ---- Postman Tests ----       #
  #       API tests with Postman       #
  ######################################

  Postman Tests:
    executor: conduit
    steps:

      - attach_workspace:
          at: /app

      - restore_cache:
          name: "Restoring Cache - Nix"
          keys:
            - nix-deps-v1-{{ checksum "shell.nix" }}

      - restore_cache:
          name: "Restoring Cache - Python"
          keys:
            - backend-deps-v3-{{ checksum "poetry.lock" }}

      - run:
          name: Touch .installed
          command: touch .installed

      - run:
          name: Wait for Postgres to be ready
          command: |
            for i in `seq 1 10`;
            do
              $ENTRYPOINT nc -z localhost 5432 && echo Success && exit
              echo -n .
              sleep 1
            done
            echo Failed waiting for Postgres && exit 1

      - run:
          name: Run the tests
          # TODO: add --pure? but then PGHOST is missing
          command: |
            $ENTRYPOINT .docker/devdb.sh
            $ENTRYPOINT make devdb
            $ENTRYPOINT pserve etc/development.ini &
            $ENTRYPOINT make postman-tests
